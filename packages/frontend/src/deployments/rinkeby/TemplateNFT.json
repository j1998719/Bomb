{
  "address": "0x47EC596C581D9354dbCb0E2C00aBe298b51EB32A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "publicMintStage",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stageId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "maxSupply",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint160",
              "name": "mintPrice",
              "type": "uint160"
            }
          ],
          "internalType": "struct TemplateNFT.StageInfo",
          "name": "_initStageInfo",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PayeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stageId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "maxSupply",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "internalType": "uint160",
              "name": "mintPrice",
              "type": "uint160"
            }
          ],
          "internalType": "struct TemplateNFT.StageInfo",
          "name": "_stageInfo",
          "type": "tuple"
        }
      ],
      "name": "nextStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "payee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "released",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stageInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "stageId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "maxSupply",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "startTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        },
        {
          "internalType": "uint160",
          "name": "mintPrice",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "redeemer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "stageId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nonce",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "amount",
              "type": "uint8"
            }
          ],
          "internalType": "struct TemplateNFT.NFTVoucher",
          "name": "voucher",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x74da6a02de6d6bcf94519f53a7190e2893b033fbe20c4a804772136ffc849268",
  "receipt": {
    "to": null,
    "from": "0x1BE55EE7E2e7E3ff9fA745f807a9FaCf50538a4d",
    "contractAddress": "0x47EC596C581D9354dbCb0E2C00aBe298b51EB32A",
    "transactionIndex": 8,
    "gasUsed": "3532550",
    "logsBloom": "0x
    "blockHash": "0x851474a5476a0f87a9166850c0cd2fdeb5cbdd69008c54c8bd502d33591b9cb0",
    "transactionHash": "0x74da6a02de6d6bcf94519f53a7190e2893b033fbe20c4a804772136ffc849268",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 10193741,
        "transactionHash": "0x74da6a02de6d6bcf94519f53a7190e2893b033fbe20c4a804772136ffc849268",
        "address": "0x47EC596C581D9354dbCb0E2C00aBe298b51EB32A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be55ee7e2e7e3ff9fa745f807a9facf50538a4d"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x851474a5476a0f87a9166850c0cd2fdeb5cbdd69008c54c8bd502d33591b9cb0"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 10193741,
        "transactionHash": "0x74da6a02de6d6bcf94519f53a7190e2893b033fbe20c4a804772136ffc849268",
        "address": "0x47EC596C581D9354dbCb0E2C00aBe298b51EB32A",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x0000000000000000000000001be55ee7e2e7e3ff9fa745f807a9facf50538a4d0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 19,
        "blockHash": "0x851474a5476a0f87a9166850c0cd2fdeb5cbdd69008c54c8bd502d33591b9cb0"
      }
    ],
    "blockNumber": 10193741,
    "cumulativeGasUsed": "5171769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "RenArt",
    "TEMP",
    [
      "0x1BE55EE7E2e7E3ff9fA745f807a9FaCf50538a4d"
    ],
    [
      1
    ],
    "10000",
    "2",
    {
      "stageId": 1,
      "maxSupply": 100,
      "startTime": 1645251767,
      "endTime": 1645510967,
      "mintPrice": "70000000000000000"
    },
    "ipfs://QmSmy9woJEuEyA57o5cbVHYkF1RLibJfpQiJNqmfEtno6f/"
  ],
  "solcInputHash": "3f09d9804ceedab968eb0194c684326f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"publicMintStage\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"mintPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct TemplateNFT.StageInfo\",\"name\":\"_initStageInfo\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"mintPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct TemplateNFT.StageInfo\",\"name\":\"_stageInfo\",\"type\":\"tuple\"}],\"name\":\"nextStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"payee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"uint160\",\"name\":\"mintPrice\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stageId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nonce\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"internalType\":\"struct TemplateNFT.NFTVoucher\",\"name\":\"voucher\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jeffrey Lin, Justa Liang\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Setup ERC721A, EIP712 and first stage info\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"nextStage((uint8,uint16,uint32,uint32,uint160))\":{\"details\":\"Go to next stage\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payee(uint256)\":{\"details\":\"Getter for the address of the payee number `index`.\"},\"release(address)\":{\"details\":\"Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals.\"},\"release(address,address)\":{\"details\":\"Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract.\"},\"released(address)\":{\"details\":\"Getter for the amount of Ether already released to a payee.\"},\"released(address,address)\":{\"details\":\"Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserve(address,uint256)\":{\"details\":\"Reserve NFT\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set new baseURI\"},\"shares(address)\":{\"details\":\"Getter for the amount of shares held by an account.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalReleased()\":{\"details\":\"Getter for the total amount of Ether already released.\"},\"totalReleased(address)\":{\"details\":\"Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract.\"},\"totalShares()\":{\"details\":\"Getter for the total shares held by payees.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Template NFT \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"publicMint(uint8)\":{\"notice\":\"Public mint\"},\"whitelistMint((address,uint8,uint8,uint8),bytes,uint8)\":{\"notice\":\"Whitelist mint using the voucher\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TemplateNFT.sol\":\"TemplateNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/finance/PaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\",\"keccak256\":\"0x2a87bad9bc75d65820b12f3cac5f4075a8fc632cd1aa5b740262834415492433\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creators: locationtba.eth, 2pmflow.eth\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n  Context,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable\\n{\\n  using Address for address;\\n  using Strings for uint256;\\n\\n  struct TokenOwnership {\\n    address addr;\\n    uint64 startTimestamp;\\n  }\\n\\n  struct AddressData {\\n    uint128 balance;\\n    uint128 numberMinted;\\n  }\\n\\n  uint256 private currentIndex = 0;\\n\\n  uint256 internal immutable maxBatchSize;\\n\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Mapping from token ID to ownership details\\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n  mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n  // Mapping owner address to address data\\n  mapping(address => AddressData) private _addressData;\\n\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev\\n   * `maxBatchSize` refers to how much a minter can mint at a time.\\n   */\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    uint256 maxBatchSize_\\n  ) {\\n    require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n    _name = name_;\\n    _symbol = symbol_;\\n    maxBatchSize = maxBatchSize_;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return currentIndex;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\\n    require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n    return index;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n    uint256 numMintedSoFar = totalSupply();\\n    uint256 tokenIdsIdx = 0;\\n    address currOwnershipAddr = address(0);\\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\\n      TokenOwnership memory ownership = _ownerships[i];\\n      if (ownership.addr != address(0)) {\\n        currOwnershipAddr = ownership.addr;\\n      }\\n      if (currOwnershipAddr == owner) {\\n        if (tokenIdsIdx == index) {\\n          return i;\\n        }\\n        tokenIdsIdx++;\\n      }\\n    }\\n    revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner) public view override returns (uint256) {\\n    require(owner != address(0), \\\"ERC721A: balance query for the zero address\\\");\\n    return uint256(_addressData[owner].balance);\\n  }\\n\\n  function _numberMinted(address owner) internal view returns (uint256) {\\n    require(\\n      owner != address(0),\\n      \\\"ERC721A: number minted query for the zero address\\\"\\n    );\\n    return uint256(_addressData[owner].numberMinted);\\n  }\\n\\n  function ownershipOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (TokenOwnership memory)\\n  {\\n    require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n    uint256 lowestTokenToCheck;\\n    if (tokenId >= maxBatchSize) {\\n      lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n    }\\n\\n    for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n      TokenOwnership memory ownership = _ownerships[curr];\\n      if (ownership.addr != address(0)) {\\n        return ownership;\\n      }\\n    }\\n\\n    revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId) public view override returns (address) {\\n    return ownershipOf(tokenId).addr;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n    );\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public override {\\n    address owner = ERC721A.ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId, owner);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), \\\"ERC721A: approved query for nonexistent token\\\");\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public override {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, _data),\\n      \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    return tokenId < currentIndex;\\n  }\\n\\n  function _safeMint(address to, uint256 quantity) internal {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `quantity` cannot be larger than the max batch size.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal {\\n    uint256 startTokenId = currentIndex;\\n    require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n    require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n    require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n    AddressData memory addressData = _addressData[to];\\n    _addressData[to] = AddressData(\\n      addressData.balance + uint128(quantity),\\n      addressData.numberMinted + uint128(quantity)\\n    );\\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    uint256 updatedIndex = startTokenId;\\n\\n    for (uint256 i = 0; i < quantity; i++) {\\n      emit Transfer(address(0), to, updatedIndex);\\n      require(\\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n      );\\n      updatedIndex++;\\n    }\\n\\n    currentIndex = updatedIndex;\\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) private {\\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n      getApproved(tokenId) == _msgSender() ||\\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n    require(\\n      isApprovedOrOwner,\\n      \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n    );\\n\\n    require(\\n      prevOwnership.addr == from,\\n      \\\"ERC721A: transfer from incorrect owner\\\"\\n    );\\n    require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId, prevOwnership.addr);\\n\\n    _addressData[from].balance -= 1;\\n    _addressData[to].balance += 1;\\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n    uint256 nextTokenId = tokenId + 1;\\n    if (_ownerships[nextTokenId].addr == address(0)) {\\n      if (_exists(nextTokenId)) {\\n        _ownerships[nextTokenId] = TokenOwnership(\\n          prevOwnership.addr,\\n          prevOwnership.startTimestamp\\n        );\\n      }\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(\\n    address to,\\n    uint256 tokenId,\\n    address owner\\n  ) private {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  uint256 public nextOwnerToExplicitlySet = 0;\\n\\n  /**\\n   * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n   */\\n  function _setOwnersExplicit(uint256 quantity) internal {\\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n    require(quantity > 0, \\\"quantity must be nonzero\\\");\\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n    if (endIndex > currentIndex - 1) {\\n      endIndex = currentIndex - 1;\\n    }\\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n    require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n      if (_ownerships[i].addr == address(0)) {\\n        TokenOwnership memory ownership = ownershipOf(i);\\n        _ownerships[i] = TokenOwnership(\\n          ownership.addr,\\n          ownership.startTimestamp\\n        );\\n      }\\n    }\\n    nextOwnerToExplicitlySet = endIndex + 1;\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) private returns (bool) {\\n    if (to.isContract()) {\\n      try\\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\\n      returns (bytes4 retval) {\\n        return retval == IERC721Receiver(to).onERC721Received.selector;\\n      } catch (bytes memory reason) {\\n        if (reason.length == 0) {\\n          revert(\\\"ERC721A: transfer to non ERC721Receiver implementer\\\");\\n        } else {\\n          assembly {\\n            revert(add(32, reason), mload(reason))\\n          }\\n        }\\n      }\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1da0534f50a82d9b6547639ff1f728af3fd6809fc5204094e96adefa8a95cfd8\",\"license\":\"MIT\"},\"contracts/TemplateNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma abicoder v2; // required to accept structs as function parameters\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\nimport \\\"./ERC721A.sol\\\";\\n\\n/**\\n @title Template NFT \\n @author Jeffrey Lin, Justa Liang\\n */\\ncontract TemplateNFT is ERC721A, Ownable, PaymentSplitter, EIP712 {\\n    using Address for address;\\n\\n    // Stage info (packed)\\n    struct StageInfo {\\n        uint8 stageId;\\n        uint16 maxSupply;\\n        uint32 startTime;\\n        uint32 endTime;\\n        uint160 mintPrice;\\n    }\\n    StageInfo public stageInfo;\\n\\n    // Maximum limit of tokens that can ever exist\\n    uint16 immutable MAX_SUPPLY;\\n\\n    // Public mint stage\\n    uint8 immutable PUBLIC_MINT_STAGE;\\n\\n    // The base link that leads to the image / video of the token\\n    string private _baseTokenURI;\\n\\n    struct MinterInfo {\\n        uint8 nonce;\\n        uint248 remain;\\n    }\\n    // Stage ID check\\n    mapping(address => MinterInfo) private _whitelistInfo;\\n\\n    // voucher for user to redeem\\n    struct NFTVoucher {\\n        address redeemer; // specify user to redeem this voucher\\n        uint8 stageId; // voucher issued in which stage\\n        uint8 nonce; // to make voucher differ from previous\\n        uint8 amount; // max amount to mint in stage\\n    }\\n\\n    /// @dev Setup ERC721A, EIP712 and first stage info\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address[] memory payees,\\n        uint256[] memory shares,\\n        uint16 maxSupply,\\n        uint8 publicMintStage,\\n        StageInfo memory _initStageInfo,\\n        string memory _initBaseURI\\n    )\\n        ERC721A(name, symbol, 5) // better not exceed 5 to show up on opensea\\n        EIP712(name, \\\"1\\\")\\n        PaymentSplitter(payees, shares)\\n    {\\n        MAX_SUPPLY = maxSupply;\\n        PUBLIC_MINT_STAGE = publicMintStage;\\n        _baseTokenURI = _initBaseURI;\\n        stageInfo = _initStageInfo;\\n    }\\n\\n    /// @notice Whitelist mint using the voucher\\n    function whitelistMint(\\n        NFTVoucher calldata voucher,\\n        bytes calldata signature,\\n        uint8 amount\\n    ) external payable {\\n        MinterInfo storage minterInfo = _whitelistInfo[_msgSender()];\\n        // if haven't redeemed then redeem first\\n        if (voucher.nonce > minterInfo.nonce) {\\n            // make sure that the signer is authorized to mint NFTs\\n            _verify(voucher, signature);\\n            // check stage ID\\n            require(stageInfo.stageId == voucher.stageId, \\\"Stage ID not match\\\");\\n            // update minter info\\n            minterInfo.remain = voucher.amount;\\n            minterInfo.nonce = voucher.nonce;\\n        }\\n\\n        // check time\\n        require(block.timestamp >= stageInfo.startTime, \\\"Sale not started\\\");\\n        require(block.timestamp <= stageInfo.endTime, \\\"Sale already ended\\\");\\n        // check if enough remain\\n        require(amount <= minterInfo.remain, \\\"Not enough remain\\\");\\n        // check if exceed\\n        require(\\n            totalSupply() + amount <= stageInfo.maxSupply,\\n            \\\"Exceed stage max supply\\\"\\n        );\\n        // check fund\\n        require(msg.value >= stageInfo.mintPrice * amount, \\\"Not enough fund\\\");\\n        super._safeMint(_msgSender(), amount);\\n        minterInfo.remain -= amount;\\n    }\\n\\n    /// @notice Public mint\\n    function publicMint(uint8 amount) external payable {\\n        // check public mint stage\\n        require(\\n            stageInfo.stageId == PUBLIC_MINT_STAGE,\\n            \\\"Public mint not started\\\"\\n        );\\n        // check time\\n        require(block.timestamp >= stageInfo.startTime, \\\"Sale not started\\\");\\n        require(block.timestamp <= stageInfo.endTime, \\\"Sale already ended\\\");\\n        // check if exceed total supply\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"Exceed total supply\\\");\\n        // check fund\\n        require(msg.value >= stageInfo.mintPrice * amount, \\\"Not enough fund\\\");\\n        // batch mint\\n        super._safeMint(_msgSender(), amount);\\n    }\\n\\n    /// @dev Verify voucher\\n    function _verify(NFTVoucher calldata voucher, bytes calldata signature)\\n        private\\n        view\\n    {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"NFTVoucher(address redeemer,uint8 stageId,uint8 nonce,uint8 amount)\\\"\\n                    ),\\n                    _msgSender(),\\n                    voucher.stageId,\\n                    voucher.nonce,\\n                    voucher.amount\\n                )\\n            )\\n        );\\n        require(\\n            owner() == ECDSA.recover(digest, signature),\\n            \\\"invalid or unauthorized\\\"\\n        );\\n    }\\n\\n    /// @dev Reserve NFT\\n    function reserve(address to, uint256 amount) external onlyOwner {\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"Exceed total supply\\\");\\n        super._safeMint(to, amount);\\n    }\\n\\n    /// @dev Go to next stage\\n    function nextStage(StageInfo memory _stageInfo) external onlyOwner {\\n        require(\\n            _stageInfo.stageId >= stageInfo.stageId,\\n            \\\"Cannot set to previous stage\\\"\\n        );\\n        require(_stageInfo.maxSupply <= MAX_SUPPLY, \\\"Set exceed max supply\\\");\\n        require(\\n            _stageInfo.stageId <= PUBLIC_MINT_STAGE,\\n            \\\"Public mint should be last stage\\\"\\n        );\\n        stageInfo = _stageInfo;\\n    }\\n\\n    /// @dev Set new baseURI\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /// @dev override _baseURI()\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0x1454f7224287bae0b0680c0c8f4cc6bc085584057dd39567c3950c51ff61b4c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040526000805560006007553480156200001b57600080fd5b5060405162004508380380620045088339810160408190526200003e91620008c0565b6040805180820190915260018152603160f81b602082015288908787838b60056200006d565b60405180910390fd5b825162000082906001906020860190620005c4565b50815162000098906002906020850190620005c4565b5060805250620000aa90503362000384565b8051825114620001185760405162461bcd60e51b815260206004820152603260248201527f5061796d656e7453706c69747465723a2070617965657320616e6420736861726044820152710cae640d8cadccee8d040dad2e6dac2e8c6d60731b606482015260840162000064565b60008251116200016b5760405162461bcd60e51b815260206004820152601a60248201527f5061796d656e7453706c69747465723a206e6f20706179656573000000000000604482015260640162000064565b60005b8251811015620001ef57620001da8382815181106200019d57634e487b7160e01b600052603260045260246000fd5b6020026020010151838381518110620001c657634e487b7160e01b600052603260045260246000fd5b6020026020010151620003d660201b60201c565b80620001e68162000a86565b9150506200016e565b505082516020938401208251928401929092206101008390526101208190524660c0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8189018190528183019790975260608181019590955260808101939093523060a0808501829052825180860382018152949093019091528251928701929092209052901b60e052506101405260f085901b6001600160f01b0319166101605260f884901b7fff0000000000000000000000000000000000000000000000000000000000000016610180528151620002d79160119190840190620005c4565b505080516010805460208401516040850151606086015160809096015160ff90951662ffffff199093169290921761010061ffff90921691909102176301000000600160581b031916630100000063ffffffff9283160263ffffffff60381b191617670100000000000000919094160292909217600160581b600160f81b0319166b0100000000000000000000006001600160a01b03909216919091021790555062000ae9945050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620004435760405162461bcd60e51b815260206004820152602c60248201527f5061796d656e7453706c69747465723a206163636f756e74206973207468652060448201526b7a65726f206164647265737360a01b606482015260840162000064565b60008111620004955760405162461bcd60e51b815260206004820152601d60248201527f5061796d656e7453706c69747465723a20736861726573206172652030000000604482015260640162000064565b6001600160a01b0382166000908152600b602052604090205415620005115760405162461bcd60e51b815260206004820152602b60248201527f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960448201526a206861732073686172657360a81b606482015260840162000064565b600d8054600181019091557fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b0319166001600160a01b0384169081179091556000908152600b602052604090208190556009546200057b90829062000a2e565b600955604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b828054620005d29062000a49565b90600052602060002090601f016020900481019282620005f6576000855562000641565b82601f106200061157805160ff191683800117855562000641565b8280016001018555821562000641579182015b828111156200064157825182559160200191906001019062000624565b506200064f92915062000653565b5090565b5b808211156200064f576000815560010162000654565b600082601f8301126200067b578081fd5b81516020620006946200068e8362000a08565b620009d5565b80838252828201915082860187848660051b8901011115620006b4578586fd5b855b85811015620006df578151620006cc8162000ad0565b84529284019290840190600101620006b6565b5090979650505050505050565b600082601f830112620006fd578081fd5b81516020620007106200068e8362000a08565b80838252828201915082860187848660051b890101111562000730578586fd5b855b85811015620006df5781518452928401929084019060010162000732565b600082601f83011262000761578081fd5b81516001600160401b038111156200077d576200077d62000aba565b602062000793601f8301601f19168201620009d5565b8281528582848701011115620007a7578384fd5b835b83811015620007c6578581018301518282018401528201620007a9565b83811115620007d757848385840101525b5095945050505050565b600060a08284031215620007f3578081fd5b60405160a081016001600160401b038111828210171562000818576200081862000aba565b6040529050806200082983620008ae565b8152620008396020840162000881565b60208201526200084c6040840162000899565b60408201526200085f6060840162000899565b60608201526080830151620008748162000ad0565b6080919091015292915050565b805161ffff811681146200089457600080fd5b919050565b805163ffffffff811681146200089457600080fd5b805160ff811681146200089457600080fd5b600080600080600080600080610180898b031215620008dd578384fd5b88516001600160401b0380821115620008f4578586fd5b620009028c838d0162000750565b995060208b015191508082111562000918578586fd5b620009268c838d0162000750565b985060408b01519150808211156200093c578586fd5b6200094a8c838d016200066a565b975060608b015191508082111562000960578586fd5b6200096e8c838d01620006ec565b96506200097e60808c0162000881565b95506200098e60a08c01620008ae565b94506200099f8c60c08d01620007e1565b93506101608b0151915080821115620009b6578283fd5b50620009c58b828c0162000750565b9150509295985092959890939650565b604051601f8201601f191681016001600160401b038111828210171562000a005762000a0062000aba565b604052919050565b60006001600160401b0382111562000a245762000a2462000aba565b5060051b60200190565b6000821982111562000a445762000a4462000aa4565b500190565b600181811c9082168062000a5e57607f821691505b6020821081141562000a8057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000a9d5762000a9d62000aa4565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ae657600080fd5b50565b60805160a05160c05160e05160601c6101005161012051610140516101605160f01c6101805160f81c61398262000b8660003960008181611069015261148d0152600081816111840152818161141501526116de01526000612b0201526000612b5101526000612b2c01526000612a8501526000612aaf01526000612ad90152600081816121230152818161214d01526127d901526139826000f3fe6080604052600436106102085760003560e01c8063715018a611610118578063c87b56dd116100a0578063d79779b21161006f578063d79779b2146106d0578063e33b7de314610706578063e985e9c51461071b578063ee83f9e214610764578063f2fde38b1461077757600080fd5b8063c87b56dd14610644578063cc47a40b14610664578063ce7c2ac214610684578063d7224ba0146106ba57600080fd5b806395d89b41116100e757806395d89b41146105995780639852595c146105ae578063a22cb465146105e4578063ad1191fa14610604578063b88d4fde1461062457600080fd5b8063715018a614610533578063858e83b5146105485780638b83209b1461055b5780638da5cb5b1461057b57600080fd5b80632f745c591161019b57806348b750441161016a57806348b75044146104935780634f6ccce7146104b357806355f804b3146104d35780636352211e146104f357806370a082311461051357600080fd5b80632f745c59146103f85780633a98ef3914610418578063406072a91461042d57806342842e0e1461047357600080fd5b806318160ddd116101d757806318160ddd14610307578063191655871461032657806323b872dd146103465780632bf871161461036657600080fd5b806301ffc9a71461025657806306fdde031461028b578063081812fc146102ad578063095ea7b3146102e557600080fd5b36610251577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561026257600080fd5b50610276610271366004613342565b610797565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102a0610804565b60405161028291906135fd565b3480156102b957600080fd5b506102cd6102c83660046134ff565b610896565b6040516001600160a01b039091168152602001610282565b3480156102f157600080fd5b506103056103003660046132fb565b610926565b005b34801561031357600080fd5b506000545b604051908152602001610282565b34801561033257600080fd5b506103056103413660046131bd565b610a3e565b34801561035257600080fd5b50610305610361366004613211565b610b6c565b34801561037257600080fd5b506010546103b79060ff81169061ffff6101008204169063ffffffff63010000008204811691600160381b8104909116906001600160a01b03600160581b9091041685565b6040805160ff909616865261ffff909416602086015263ffffffff928316938501939093521660608301526001600160a01b0316608082015260a001610282565b34801561040457600080fd5b506103186104133660046132fb565b610b77565b34801561042457600080fd5b50600954610318565b34801561043957600080fd5b5061031861044836600461337a565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b34801561047f57600080fd5b5061030561048e366004613211565b610ce5565b34801561049f57600080fd5b506103056104ae36600461337a565b610d00565b3480156104bf57600080fd5b506103186104ce3660046134ff565b610ee8565b3480156104df57600080fd5b506103056104ee36600461338c565b610f4a565b3480156104ff57600080fd5b506102cd61050e3660046134ff565b610f8b565b34801561051f57600080fd5b5061031861052e3660046131bd565b610f9d565b34801561053f57600080fd5b5061030561102e565b61030561055636600461352f565b611064565b34801561056757600080fd5b506102cd6105763660046134ff565b61127d565b34801561058757600080fd5b506008546001600160a01b03166102cd565b3480156105a557600080fd5b506102a06112bb565b3480156105ba57600080fd5b506103186105c93660046131bd565b6001600160a01b03166000908152600c602052604090205490565b3480156105f057600080fd5b506103056105ff3660046132ce565b6112ca565b34801561061057600080fd5b5061030561061f366004613468565b61138f565b34801561063057600080fd5b5061030561063f366004613251565b6115ac565b34801561065057600080fd5b506102a061065f3660046134ff565b6115e5565b34801561067057600080fd5b5061030561067f3660046132fb565b6116b2565b34801561069057600080fd5b5061031861069f3660046131bd565b6001600160a01b03166000908152600b602052604090205490565b3480156106c657600080fd5b5061031860075481565b3480156106dc57600080fd5b506103186106eb3660046131bd565b6001600160a01b03166000908152600e602052604090205490565b34801561071257600080fd5b50600a54610318565b34801561072757600080fd5b506102766107363660046131d9565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6103056107723660046133d2565b611763565b34801561078357600080fd5b506103056107923660046131bd565b611a74565b60006001600160e01b031982166380ac58cd60e01b14806107c857506001600160e01b03198216635b5e139f60e01b145b806107e357506001600160e01b0319821663780e9d6360e01b145b806107fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461081390613867565b80601f016020809104026020016040519081016040528092919081815260200182805461083f90613867565b801561088c5780601f106108615761010080835404028352916020019161088c565b820191906000526020600020905b81548152906001019060200180831161086f57829003601f168201915b5050505050905090565b60006108a3826000541190565b61090a5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061093182610f8b565b9050806001600160a01b0316836001600160a01b031614156109a05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610901565b336001600160a01b03821614806109bc57506109bc8133610736565b610a2e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610901565b610a39838383611b0c565b505050565b6001600160a01b0381166000908152600b6020526040902054610a735760405162461bcd60e51b815260040161090190613610565b6000610a7e600a5490565b610a88904761374b565b90506000610ab58383610ab0866001600160a01b03166000908152600c602052604090205490565b611b68565b905080610ad45760405162461bcd60e51b815260040161090190613656565b6001600160a01b0383166000908152600c602052604081208054839290610afc90849061374b565b9250508190555080600a6000828254610b15919061374b565b90915550610b2590508382611bae565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b610a39838383611cc7565b6000610b8283610f9d565b8210610bdb5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610901565b600080549080805b83811015610c85576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610c3657805192505b876001600160a01b0316836001600160a01b03161415610c725786841415610c64575093506107fe92505050565b83610c6e816138a2565b9450505b5080610c7d816138a2565b915050610be3565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610901565b610a39838383604051806020016040528060008152506115ac565b6001600160a01b0381166000908152600b6020526040902054610d355760405162461bcd60e51b815260040161090190613610565b6001600160a01b0382166000908152600e60205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190613517565b610dcf919061374b565b90506000610e088383610ab087876001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b905080610e275760405162461bcd60e51b815260040161090190613656565b6001600160a01b038085166000908152600f6020908152604080832093871683529290529081208054839290610e5e90849061374b565b90915550506001600160a01b0384166000908152600e602052604081208054839290610e8b90849061374b565b90915550610e9c905084848361204f565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b600080548210610f465760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610901565b5090565b6008546001600160a01b03163314610f745760405162461bcd60e51b8152600401610901906136a1565b8051610f8790601190602084019061308d565b5050565b6000610f96826120a1565b5192915050565b60006001600160a01b0382166110095760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610901565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6008546001600160a01b031633146110585760405162461bcd60e51b8152600401610901906136a1565b611062600061224b565b565b6010547f000000000000000000000000000000000000000000000000000000000000000060ff9081169116146110dc5760405162461bcd60e51b815260206004820152601760248201527f5075626c6963206d696e74206e6f7420737461727465640000000000000000006044820152606401610901565b6010546301000000900463ffffffff1642101561112e5760405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606401610901565b601054600160381b900463ffffffff164211156111825760405162461bcd60e51b815260206004820152601260248201527114d85b1948185b1c9958591e48195b99195960721b6044820152606401610901565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168160ff166111b460005490565b6111be919061374b565b11156112025760405162461bcd60e51b815260206004820152601360248201527245786365656420746f74616c20737570706c7960681b6044820152606401610901565b6010546112239060ff831690600160581b90046001600160a01b0316613777565b6001600160a01b031634101561126d5760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b6044820152606401610901565b61127a338260ff1661229d565b50565b6000600d82815481106112a057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b60606002805461081390613867565b6001600160a01b0382163314156113235760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610901565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146113b95760405162461bcd60e51b8152600401610901906136a1565b601054815160ff918216911610156114135760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073657420746f2070726576696f7573207374616765000000006044820152606401610901565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16816020015161ffff1611156114875760405162461bcd60e51b815260206004820152601560248201527453657420657863656564206d617820737570706c7960581b6044820152606401610901565b805160ff7f00000000000000000000000000000000000000000000000000000000000000008116911611156114fe5760405162461bcd60e51b815260206004820181905260248201527f5075626c6963206d696e742073686f756c64206265206c6173742073746167656044820152606401610901565b80516010805460208401516040850151606086015160809096015160ff90951662ffffff199093169290921761010061ffff90921691909102176affffffffffffffff0000001916630100000063ffffffff928316026affffffff00000000000000191617600160381b9190941602929092177fff0000000000000000000000000000000000000000ffffffffffffffffffffff16600160581b6001600160a01b0390921691909102179055565b6115b7848484611cc7565b6115c3848484846122b7565b6115df5760405162461bcd60e51b8152600401610901906136d6565b50505050565b60606115f2826000541190565b6116565760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610901565b60006116606123c4565b9050600081511161168057604051806020016040528060008152506116ab565b8061168a846123d3565b60405160200161169b929190613591565b6040516020818303038152906040525b9392505050565b6008546001600160a01b031633146116dc5760405162461bcd60e51b8152600401610901906136a1565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161170b60005490565b611715919061374b565b11156117595760405162461bcd60e51b815260206004820152601360248201527245786365656420746f74616c20737570706c7960681b6044820152606401610901565b610f87828261229d565b33600090815260126020526040908190208054909160ff9091169061178e906060880190880161352f565b60ff16111561183e576117a28585856124ed565b6117b2604086016020870161352f565b60105460ff9081169116146117fe5760405162461bcd60e51b81526020600482015260126024820152710a6e8c2ceca40928840dcdee840dac2e8c6d60731b6044820152606401610901565b61180e608086016060870161352f565b815461010060ff92831602911617815561182e606086016040870161352f565b815460ff191660ff919091161781555b6010546301000000900463ffffffff164210156118905760405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606401610901565b601054600160381b900463ffffffff164211156118e45760405162461bcd60e51b815260206004820152601260248201527114d85b1948185b1c9958591e48195b99195960721b6044820152606401610901565b805461010090046001600160f81b031660ff8316111561193a5760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b4103932b6b0b4b760791b6044820152606401610901565b60105461ffff6101009091041660ff831661195460005490565b61195e919061374b565b11156119ac5760405162461bcd60e51b815260206004820152601760248201527f457863656564207374616765206d617820737570706c790000000000000000006044820152606401610901565b6010546119cd9060ff841690600160581b90046001600160a01b0316613777565b6001600160a01b0316341015611a175760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b6044820152606401610901565b611a24338360ff1661229d565b805460ff8316908290600190611a4990849061010090046001600160f81b03166137ed565b92506101000a8154816001600160f81b0302191690836001600160f81b031602179055505050505050565b6008546001600160a01b03163314611a9e5760405162461bcd60e51b8152600401610901906136a1565b6001600160a01b038116611b035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610901565b61127a8161224b565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009546001600160a01b0384166000908152600b602052604081205490918391611b9290866137a6565b611b9c9190613763565b611ba6919061380d565b949350505050565b80471015611bfe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610901565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c4b576040519150601f19603f3d011682016040523d82523d6000602084013e611c50565b606091505b5050905080610a395760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610901565b6000611cd2826120a1565b80519091506000906001600160a01b0316336001600160a01b03161480611d09575033611cfe84610896565b6001600160a01b0316145b80611d1b57508151611d1b9033610736565b905080611d855760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610901565b846001600160a01b031682600001516001600160a01b031614611df95760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610901565b6001600160a01b038416611e5d5760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610901565b611e6d6000848460000151611b0c565b6001600160a01b0385166000908152600460205260408120805460019290611e9f9084906001600160801b03166137c5565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b03861660009081526004602052604081208054600194509092611eeb91859116613729565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055611f7384600161374b565b6000818152600360205260409020549091506001600160a01b031661200557611f9d816000541190565b156120055760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a3990849061264a565b60408051808201909152600080825260208201526120c0826000541190565b61211f5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610901565b60007f00000000000000000000000000000000000000000000000000000000000000008310612180576121727f00000000000000000000000000000000000000000000000000000000000000008461380d565b61217d90600161374b565b90505b825b8181106121ea576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156121d757949350505050565b50806121e281613850565b915050612182565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610901565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610f8782826040518060200160405280600081525061271c565b60006001600160a01b0384163b156123b957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122fb9033908990889088906004016135c0565b602060405180830381600087803b15801561231557600080fd5b505af1925050508015612345575060408051601f3d908101601f191682019092526123429181019061335e565b60015b61239f573d808015612373576040519150601f19603f3d011682016040523d82523d6000602084013e612378565b606091505b5080516123975760405162461bcd60e51b8152600401610901906136d6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba6565b506001949350505050565b60606011805461081390613867565b6060816123f75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612421578061240b816138a2565b915061241a9050600a83613763565b91506123fb565b60008167ffffffffffffffff81111561244a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612474576020820181803683370190505b5090505b8415611ba65761248960018361380d565b9150612496600a866138bd565b6124a190603061374b565b60f81b8183815181106124c457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506124e6600a86613763565b9450612478565b60006125977f09b44ab2206268ececcfda9e0748ea12c4c908fc093f73e0a04d078948eb2ead33612524604088016020890161352f565b6125346060890160408a0161352f565b61254460808a0160608b0161352f565b6040805160208101969096526001600160a01b039094169385019390935260ff9182166060850152811660808401521660a082015260c001604051602081830303815290604052805190602001206129f7565b90506125d98184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a4592505050565b6001600160a01b03166125f46008546001600160a01b031690565b6001600160a01b0316146115df5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a65640000000000000000006044820152606401610901565b600061269f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a699092919063ffffffff16565b805190915015610a3957808060200190518101906126bd9190613326565b610a395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610901565b6000546001600160a01b03841661277f5760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610901565b61278a816000541190565b156127d75760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610901565b7f00000000000000000000000000000000000000000000000000000000000000008311156128525760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610901565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b90910416918101919091528151808301909252805190919081906128ae908790613729565b6001600160801b031681526020018583602001516128cc9190613729565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156129ec5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129b060008884886122b7565b6129cc5760405162461bcd60e51b8152600401610901906136d6565b816129d6816138a2565b92505080806129e4906138a2565b915050612963565b506000819055612047565b60006107fe612a04612a78565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000612a548585612b9f565b91509150612a6181612c0f565b509392505050565b6060611ba68484600085612e10565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612ad157507f000000000000000000000000000000000000000000000000000000000000000046145b15612afb57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600080825160411415612bd65760208301516040840151606085015160001a612bca87828585612f38565b94509450505050612c08565b825160401415612c005760208301516040840151612bf5868383613025565b935093505050612c08565b506000905060025b9250929050565b6000816004811115612c3157634e487b7160e01b600052602160045260246000fd5b1415612c3a5750565b6001816004811115612c5c57634e487b7160e01b600052602160045260246000fd5b1415612caa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610901565b6002816004811115612ccc57634e487b7160e01b600052602160045260246000fd5b1415612d1a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610901565b6003816004811115612d3c57634e487b7160e01b600052602160045260246000fd5b1415612d955760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610901565b6004816004811115612db757634e487b7160e01b600052602160045260246000fd5b141561127a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610901565b606082471015612e715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610901565b843b612ebf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610901565b600080866001600160a01b03168587604051612edb9190613575565b60006040518083038185875af1925050503d8060008114612f18576040519150601f19603f3d011682016040523d82523d6000602084013e612f1d565b606091505b5091509150612f2d828286613054565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f6f575060009050600361301c565b8460ff16601b14158015612f8757508460ff16601c14155b15612f98575060009050600461301c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fec573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166130155760006001925092505061301c565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161304687828885612f38565b935093505050935093915050565b606083156130635750816116ab565b8251156130735782518084602001fd5b8160405162461bcd60e51b815260040161090191906135fd565b82805461309990613867565b90600052602060002090601f0160209004810192826130bb5760008555613101565b82601f106130d457805160ff1916838001178555613101565b82800160010185558215613101579182015b828111156131015782518255916020019190600101906130e6565b50610f469291505b80821115610f465760008155600101613109565b600067ffffffffffffffff80841115613138576131386138fd565b604051601f8501601f19908116603f01168101908282118183101715613160576131606138fd565b8160405280935085815286868601111561317957600080fd5b858560208301376000602087830101525050509392505050565b803563ffffffff811681146131a757600080fd5b919050565b803560ff811681146131a757600080fd5b6000602082840312156131ce578081fd5b81356116ab81613913565b600080604083850312156131eb578081fd5b82356131f681613913565b9150602083013561320681613913565b809150509250929050565b600080600060608486031215613225578081fd5b833561323081613913565b9250602084013561324081613913565b929592945050506040919091013590565b60008060008060808587031215613266578081fd5b843561327181613913565b9350602085013561328181613913565b925060408501359150606085013567ffffffffffffffff8111156132a3578182fd5b8501601f810187136132b3578182fd5b6132c28782356020840161311d565b91505092959194509250565b600080604083850312156132e0578182fd5b82356132eb81613913565b9150602083013561320681613928565b6000806040838503121561330d578081fd5b823561331881613913565b946020939093013593505050565b600060208284031215613337578081fd5b81516116ab81613928565b600060208284031215613353578081fd5b81356116ab81613936565b60006020828403121561336f578081fd5b81516116ab81613936565b600080604083850312156131eb578182fd5b60006020828403121561339d578081fd5b813567ffffffffffffffff8111156133b3578182fd5b8201601f810184136133c3578182fd5b611ba68482356020840161311d565b60008060008084860360c08112156133e8578283fd5b60808112156133f5578283fd5b50849350608085013567ffffffffffffffff80821115613413578384fd5b818701915087601f830112613426578384fd5b813581811115613434578485fd5b886020828501011115613445578485fd5b60208301955080945050505061345d60a086016131ac565b905092959194509250565b600060a08284031215613479578081fd5b60405160a0810181811067ffffffffffffffff8211171561349c5761349c6138fd565b6040526134a8836131ac565b8152602083013561ffff811681146134be578283fd5b60208201526134cf60408401613193565b60408201526134e060608401613193565b606082015260808301356134f381613913565b60808201529392505050565b600060208284031215613510578081fd5b5035919050565b600060208284031215613528578081fd5b5051919050565b600060208284031215613540578081fd5b6116ab826131ac565b60008151808452613561816020860160208601613824565b601f01601f19169290920160200192915050565b60008251613587818460208701613824565b9190910192915050565b600083516135a3818460208801613824565b8351908301906135b7818360208801613824565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906135f390830184613549565b9695505050505050565b6020815260006116ab6020830184613549565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b038083168185168083038211156135b7576135b76138d1565b6000821982111561375e5761375e6138d1565b500190565b600082613772576137726138e7565b500490565b60006001600160a01b038281168482168115158284048211161561379d5761379d6138d1565b02949350505050565b60008160001904831182151516156137c0576137c06138d1565b500290565b60006001600160801b03838116908316818110156137e5576137e56138d1565b039392505050565b60006001600160f81b03838116908316818110156137e5576137e56138d1565b60008282101561381f5761381f6138d1565b500390565b60005b8381101561383f578181015183820152602001613827565b838111156115df5750506000910152565b60008161385f5761385f6138d1565b506000190190565b600181811c9082168061387b57607f821691505b6020821081141561389c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156138b6576138b66138d1565b5060010190565b6000826138cc576138cc6138e7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461127a57600080fd5b801515811461127a57600080fd5b6001600160e01b03198116811461127a57600080fdfea26469706673582212200e5170909b2d15b17eebd643a1070fba1314314a80aa5e2540e9d41ecff52ab964736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c8063715018a611610118578063c87b56dd116100a0578063d79779b21161006f578063d79779b2146106d0578063e33b7de314610706578063e985e9c51461071b578063ee83f9e214610764578063f2fde38b1461077757600080fd5b8063c87b56dd14610644578063cc47a40b14610664578063ce7c2ac214610684578063d7224ba0146106ba57600080fd5b806395d89b41116100e757806395d89b41146105995780639852595c146105ae578063a22cb465146105e4578063ad1191fa14610604578063b88d4fde1461062457600080fd5b8063715018a614610533578063858e83b5146105485780638b83209b1461055b5780638da5cb5b1461057b57600080fd5b80632f745c591161019b57806348b750441161016a57806348b75044146104935780634f6ccce7146104b357806355f804b3146104d35780636352211e146104f357806370a082311461051357600080fd5b80632f745c59146103f85780633a98ef3914610418578063406072a91461042d57806342842e0e1461047357600080fd5b806318160ddd116101d757806318160ddd14610307578063191655871461032657806323b872dd146103465780632bf871161461036657600080fd5b806301ffc9a71461025657806306fdde031461028b578063081812fc146102ad578063095ea7b3146102e557600080fd5b36610251577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033604080516001600160a01b0390921682523460208301520160405180910390a1005b600080fd5b34801561026257600080fd5b50610276610271366004613342565b610797565b60405190151581526020015b60405180910390f35b34801561029757600080fd5b506102a0610804565b60405161028291906135fd565b3480156102b957600080fd5b506102cd6102c83660046134ff565b610896565b6040516001600160a01b039091168152602001610282565b3480156102f157600080fd5b506103056103003660046132fb565b610926565b005b34801561031357600080fd5b506000545b604051908152602001610282565b34801561033257600080fd5b506103056103413660046131bd565b610a3e565b34801561035257600080fd5b50610305610361366004613211565b610b6c565b34801561037257600080fd5b506010546103b79060ff81169061ffff6101008204169063ffffffff63010000008204811691600160381b8104909116906001600160a01b03600160581b9091041685565b6040805160ff909616865261ffff909416602086015263ffffffff928316938501939093521660608301526001600160a01b0316608082015260a001610282565b34801561040457600080fd5b506103186104133660046132fb565b610b77565b34801561042457600080fd5b50600954610318565b34801561043957600080fd5b5061031861044836600461337a565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b34801561047f57600080fd5b5061030561048e366004613211565b610ce5565b34801561049f57600080fd5b506103056104ae36600461337a565b610d00565b3480156104bf57600080fd5b506103186104ce3660046134ff565b610ee8565b3480156104df57600080fd5b506103056104ee36600461338c565b610f4a565b3480156104ff57600080fd5b506102cd61050e3660046134ff565b610f8b565b34801561051f57600080fd5b5061031861052e3660046131bd565b610f9d565b34801561053f57600080fd5b5061030561102e565b61030561055636600461352f565b611064565b34801561056757600080fd5b506102cd6105763660046134ff565b61127d565b34801561058757600080fd5b506008546001600160a01b03166102cd565b3480156105a557600080fd5b506102a06112bb565b3480156105ba57600080fd5b506103186105c93660046131bd565b6001600160a01b03166000908152600c602052604090205490565b3480156105f057600080fd5b506103056105ff3660046132ce565b6112ca565b34801561061057600080fd5b5061030561061f366004613468565b61138f565b34801561063057600080fd5b5061030561063f366004613251565b6115ac565b34801561065057600080fd5b506102a061065f3660046134ff565b6115e5565b34801561067057600080fd5b5061030561067f3660046132fb565b6116b2565b34801561069057600080fd5b5061031861069f3660046131bd565b6001600160a01b03166000908152600b602052604090205490565b3480156106c657600080fd5b5061031860075481565b3480156106dc57600080fd5b506103186106eb3660046131bd565b6001600160a01b03166000908152600e602052604090205490565b34801561071257600080fd5b50600a54610318565b34801561072757600080fd5b506102766107363660046131d9565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6103056107723660046133d2565b611763565b34801561078357600080fd5b506103056107923660046131bd565b611a74565b60006001600160e01b031982166380ac58cd60e01b14806107c857506001600160e01b03198216635b5e139f60e01b145b806107e357506001600160e01b0319821663780e9d6360e01b145b806107fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461081390613867565b80601f016020809104026020016040519081016040528092919081815260200182805461083f90613867565b801561088c5780601f106108615761010080835404028352916020019161088c565b820191906000526020600020905b81548152906001019060200180831161086f57829003601f168201915b5050505050905090565b60006108a3826000541190565b61090a5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061093182610f8b565b9050806001600160a01b0316836001600160a01b031614156109a05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610901565b336001600160a01b03821614806109bc57506109bc8133610736565b610a2e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610901565b610a39838383611b0c565b505050565b6001600160a01b0381166000908152600b6020526040902054610a735760405162461bcd60e51b815260040161090190613610565b6000610a7e600a5490565b610a88904761374b565b90506000610ab58383610ab0866001600160a01b03166000908152600c602052604090205490565b611b68565b905080610ad45760405162461bcd60e51b815260040161090190613656565b6001600160a01b0383166000908152600c602052604081208054839290610afc90849061374b565b9250508190555080600a6000828254610b15919061374b565b90915550610b2590508382611bae565b604080516001600160a01b0385168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a1505050565b610a39838383611cc7565b6000610b8283610f9d565b8210610bdb5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610901565b600080549080805b83811015610c85576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610c3657805192505b876001600160a01b0316836001600160a01b03161415610c725786841415610c64575093506107fe92505050565b83610c6e816138a2565b9450505b5080610c7d816138a2565b915050610be3565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610901565b610a39838383604051806020016040528060008152506115ac565b6001600160a01b0381166000908152600b6020526040902054610d355760405162461bcd60e51b815260040161090190613610565b6001600160a01b0382166000908152600e60205260408120546040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190613517565b610dcf919061374b565b90506000610e088383610ab087876001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b905080610e275760405162461bcd60e51b815260040161090190613656565b6001600160a01b038085166000908152600f6020908152604080832093871683529290529081208054839290610e5e90849061374b565b90915550506001600160a01b0384166000908152600e602052604081208054839290610e8b90849061374b565b90915550610e9c905084848361204f565b604080516001600160a01b038581168252602082018490528616917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a250505050565b600080548210610f465760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610901565b5090565b6008546001600160a01b03163314610f745760405162461bcd60e51b8152600401610901906136a1565b8051610f8790601190602084019061308d565b5050565b6000610f96826120a1565b5192915050565b60006001600160a01b0382166110095760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610901565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6008546001600160a01b031633146110585760405162461bcd60e51b8152600401610901906136a1565b611062600061224b565b565b6010547f000000000000000000000000000000000000000000000000000000000000000060ff9081169116146110dc5760405162461bcd60e51b815260206004820152601760248201527f5075626c6963206d696e74206e6f7420737461727465640000000000000000006044820152606401610901565b6010546301000000900463ffffffff1642101561112e5760405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606401610901565b601054600160381b900463ffffffff164211156111825760405162461bcd60e51b815260206004820152601260248201527114d85b1948185b1c9958591e48195b99195960721b6044820152606401610901565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168160ff166111b460005490565b6111be919061374b565b11156112025760405162461bcd60e51b815260206004820152601360248201527245786365656420746f74616c20737570706c7960681b6044820152606401610901565b6010546112239060ff831690600160581b90046001600160a01b0316613777565b6001600160a01b031634101561126d5760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b6044820152606401610901565b61127a338260ff1661229d565b50565b6000600d82815481106112a057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b60606002805461081390613867565b6001600160a01b0382163314156113235760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610901565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146113b95760405162461bcd60e51b8152600401610901906136a1565b601054815160ff918216911610156114135760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742073657420746f2070726576696f7573207374616765000000006044820152606401610901565b7f000000000000000000000000000000000000000000000000000000000000000061ffff16816020015161ffff1611156114875760405162461bcd60e51b815260206004820152601560248201527453657420657863656564206d617820737570706c7960581b6044820152606401610901565b805160ff7f00000000000000000000000000000000000000000000000000000000000000008116911611156114fe5760405162461bcd60e51b815260206004820181905260248201527f5075626c6963206d696e742073686f756c64206265206c6173742073746167656044820152606401610901565b80516010805460208401516040850151606086015160809096015160ff90951662ffffff199093169290921761010061ffff90921691909102176affffffffffffffff0000001916630100000063ffffffff928316026affffffff00000000000000191617600160381b9190941602929092177fff0000000000000000000000000000000000000000ffffffffffffffffffffff16600160581b6001600160a01b0390921691909102179055565b6115b7848484611cc7565b6115c3848484846122b7565b6115df5760405162461bcd60e51b8152600401610901906136d6565b50505050565b60606115f2826000541190565b6116565760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610901565b60006116606123c4565b9050600081511161168057604051806020016040528060008152506116ab565b8061168a846123d3565b60405160200161169b929190613591565b6040516020818303038152906040525b9392505050565b6008546001600160a01b031633146116dc5760405162461bcd60e51b8152600401610901906136a1565b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161170b60005490565b611715919061374b565b11156117595760405162461bcd60e51b815260206004820152601360248201527245786365656420746f74616c20737570706c7960681b6044820152606401610901565b610f87828261229d565b33600090815260126020526040908190208054909160ff9091169061178e906060880190880161352f565b60ff16111561183e576117a28585856124ed565b6117b2604086016020870161352f565b60105460ff9081169116146117fe5760405162461bcd60e51b81526020600482015260126024820152710a6e8c2ceca40928840dcdee840dac2e8c6d60731b6044820152606401610901565b61180e608086016060870161352f565b815461010060ff92831602911617815561182e606086016040870161352f565b815460ff191660ff919091161781555b6010546301000000900463ffffffff164210156118905760405162461bcd60e51b815260206004820152601060248201526f14d85b19481b9bdd081cdd185c9d195960821b6044820152606401610901565b601054600160381b900463ffffffff164211156118e45760405162461bcd60e51b815260206004820152601260248201527114d85b1948185b1c9958591e48195b99195960721b6044820152606401610901565b805461010090046001600160f81b031660ff8316111561193a5760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b4103932b6b0b4b760791b6044820152606401610901565b60105461ffff6101009091041660ff831661195460005490565b61195e919061374b565b11156119ac5760405162461bcd60e51b815260206004820152601760248201527f457863656564207374616765206d617820737570706c790000000000000000006044820152606401610901565b6010546119cd9060ff841690600160581b90046001600160a01b0316613777565b6001600160a01b0316341015611a175760405162461bcd60e51b815260206004820152600f60248201526e139bdd08195b9bdd59da08199d5b99608a1b6044820152606401610901565b611a24338360ff1661229d565b805460ff8316908290600190611a4990849061010090046001600160f81b03166137ed565b92506101000a8154816001600160f81b0302191690836001600160f81b031602179055505050505050565b6008546001600160a01b03163314611a9e5760405162461bcd60e51b8152600401610901906136a1565b6001600160a01b038116611b035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610901565b61127a8161224b565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009546001600160a01b0384166000908152600b602052604081205490918391611b9290866137a6565b611b9c9190613763565b611ba6919061380d565b949350505050565b80471015611bfe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610901565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c4b576040519150601f19603f3d011682016040523d82523d6000602084013e611c50565b606091505b5050905080610a395760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610901565b6000611cd2826120a1565b80519091506000906001600160a01b0316336001600160a01b03161480611d09575033611cfe84610896565b6001600160a01b0316145b80611d1b57508151611d1b9033610736565b905080611d855760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610901565b846001600160a01b031682600001516001600160a01b031614611df95760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610901565b6001600160a01b038416611e5d5760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610901565b611e6d6000848460000151611b0c565b6001600160a01b0385166000908152600460205260408120805460019290611e9f9084906001600160801b03166137c5565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b03861660009081526004602052604081208054600194509092611eeb91859116613729565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055611f7384600161374b565b6000818152600360205260409020549091506001600160a01b031661200557611f9d816000541190565b156120055760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a3990849061264a565b60408051808201909152600080825260208201526120c0826000541190565b61211f5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610901565b60007f00000000000000000000000000000000000000000000000000000000000000008310612180576121727f00000000000000000000000000000000000000000000000000000000000000008461380d565b61217d90600161374b565b90505b825b8181106121ea576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156121d757949350505050565b50806121e281613850565b915050612182565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610901565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610f8782826040518060200160405280600081525061271c565b60006001600160a01b0384163b156123b957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122fb9033908990889088906004016135c0565b602060405180830381600087803b15801561231557600080fd5b505af1925050508015612345575060408051601f3d908101601f191682019092526123429181019061335e565b60015b61239f573d808015612373576040519150601f19603f3d011682016040523d82523d6000602084013e612378565b606091505b5080516123975760405162461bcd60e51b8152600401610901906136d6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba6565b506001949350505050565b60606011805461081390613867565b6060816123f75750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612421578061240b816138a2565b915061241a9050600a83613763565b91506123fb565b60008167ffffffffffffffff81111561244a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612474576020820181803683370190505b5090505b8415611ba65761248960018361380d565b9150612496600a866138bd565b6124a190603061374b565b60f81b8183815181106124c457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506124e6600a86613763565b9450612478565b60006125977f09b44ab2206268ececcfda9e0748ea12c4c908fc093f73e0a04d078948eb2ead33612524604088016020890161352f565b6125346060890160408a0161352f565b61254460808a0160608b0161352f565b6040805160208101969096526001600160a01b039094169385019390935260ff9182166060850152811660808401521660a082015260c001604051602081830303815290604052805190602001206129f7565b90506125d98184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a4592505050565b6001600160a01b03166125f46008546001600160a01b031690565b6001600160a01b0316146115df5760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a65640000000000000000006044820152606401610901565b600061269f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a699092919063ffffffff16565b805190915015610a3957808060200190518101906126bd9190613326565b610a395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610901565b6000546001600160a01b03841661277f5760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610901565b61278a816000541190565b156127d75760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610901565b7f00000000000000000000000000000000000000000000000000000000000000008311156128525760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610901565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b90910416918101919091528151808301909252805190919081906128ae908790613729565b6001600160801b031681526020018583602001516128cc9190613729565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156129ec5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46129b060008884886122b7565b6129cc5760405162461bcd60e51b8152600401610901906136d6565b816129d6816138a2565b92505080806129e4906138a2565b915050612963565b506000819055612047565b60006107fe612a04612a78565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000612a548585612b9f565b91509150612a6181612c0f565b509392505050565b6060611ba68484600085612e10565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612ad157507f000000000000000000000000000000000000000000000000000000000000000046145b15612afb57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600080825160411415612bd65760208301516040840151606085015160001a612bca87828585612f38565b94509450505050612c08565b825160401415612c005760208301516040840151612bf5868383613025565b935093505050612c08565b506000905060025b9250929050565b6000816004811115612c3157634e487b7160e01b600052602160045260246000fd5b1415612c3a5750565b6001816004811115612c5c57634e487b7160e01b600052602160045260246000fd5b1415612caa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610901565b6002816004811115612ccc57634e487b7160e01b600052602160045260246000fd5b1415612d1a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610901565b6003816004811115612d3c57634e487b7160e01b600052602160045260246000fd5b1415612d955760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610901565b6004816004811115612db757634e487b7160e01b600052602160045260246000fd5b141561127a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610901565b606082471015612e715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610901565b843b612ebf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610901565b600080866001600160a01b03168587604051612edb9190613575565b60006040518083038185875af1925050503d8060008114612f18576040519150601f19603f3d011682016040523d82523d6000602084013e612f1d565b606091505b5091509150612f2d828286613054565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612f6f575060009050600361301c565b8460ff16601b14158015612f8757508460ff16601c14155b15612f98575060009050600461301c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612fec573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166130155760006001925092505061301c565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161304687828885612f38565b935093505050935093915050565b606083156130635750816116ab565b8251156130735782518084602001fd5b8160405162461bcd60e51b815260040161090191906135fd565b82805461309990613867565b90600052602060002090601f0160209004810192826130bb5760008555613101565b82601f106130d457805160ff1916838001178555613101565b82800160010185558215613101579182015b828111156131015782518255916020019190600101906130e6565b50610f469291505b80821115610f465760008155600101613109565b600067ffffffffffffffff80841115613138576131386138fd565b604051601f8501601f19908116603f01168101908282118183101715613160576131606138fd565b8160405280935085815286868601111561317957600080fd5b858560208301376000602087830101525050509392505050565b803563ffffffff811681146131a757600080fd5b919050565b803560ff811681146131a757600080fd5b6000602082840312156131ce578081fd5b81356116ab81613913565b600080604083850312156131eb578081fd5b82356131f681613913565b9150602083013561320681613913565b809150509250929050565b600080600060608486031215613225578081fd5b833561323081613913565b9250602084013561324081613913565b929592945050506040919091013590565b60008060008060808587031215613266578081fd5b843561327181613913565b9350602085013561328181613913565b925060408501359150606085013567ffffffffffffffff8111156132a3578182fd5b8501601f810187136132b3578182fd5b6132c28782356020840161311d565b91505092959194509250565b600080604083850312156132e0578182fd5b82356132eb81613913565b9150602083013561320681613928565b6000806040838503121561330d578081fd5b823561331881613913565b946020939093013593505050565b600060208284031215613337578081fd5b81516116ab81613928565b600060208284031215613353578081fd5b81356116ab81613936565b60006020828403121561336f578081fd5b81516116ab81613936565b600080604083850312156131eb578182fd5b60006020828403121561339d578081fd5b813567ffffffffffffffff8111156133b3578182fd5b8201601f810184136133c3578182fd5b611ba68482356020840161311d565b60008060008084860360c08112156133e8578283fd5b60808112156133f5578283fd5b50849350608085013567ffffffffffffffff80821115613413578384fd5b818701915087601f830112613426578384fd5b813581811115613434578485fd5b886020828501011115613445578485fd5b60208301955080945050505061345d60a086016131ac565b905092959194509250565b600060a08284031215613479578081fd5b60405160a0810181811067ffffffffffffffff8211171561349c5761349c6138fd565b6040526134a8836131ac565b8152602083013561ffff811681146134be578283fd5b60208201526134cf60408401613193565b60408201526134e060608401613193565b606082015260808301356134f381613913565b60808201529392505050565b600060208284031215613510578081fd5b5035919050565b600060208284031215613528578081fd5b5051919050565b600060208284031215613540578081fd5b6116ab826131ac565b60008151808452613561816020860160208601613824565b601f01601f19169290920160200192915050565b60008251613587818460208701613824565b9190910192915050565b600083516135a3818460208801613824565b8351908301906135b7818360208801613824565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906135f390830184613549565b9695505050505050565b6020815260006116ab6020830184613549565b60208082526026908201527f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060408201526573686172657360d01b606082015260800190565b6020808252602b908201527f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060408201526a191d59481c185e5b595b9d60aa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b038083168185168083038211156135b7576135b76138d1565b6000821982111561375e5761375e6138d1565b500190565b600082613772576137726138e7565b500490565b60006001600160a01b038281168482168115158284048211161561379d5761379d6138d1565b02949350505050565b60008160001904831182151516156137c0576137c06138d1565b500290565b60006001600160801b03838116908316818110156137e5576137e56138d1565b039392505050565b60006001600160f81b03838116908316818110156137e5576137e56138d1565b60008282101561381f5761381f6138d1565b500390565b60005b8381101561383f578181015183820152602001613827565b838111156115df5750506000910152565b60008161385f5761385f6138d1565b506000190190565b600181811c9082168061387b57607f821691505b6020821081141561389c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156138b6576138b66138d1565b5060010190565b6000826138cc576138cc6138e7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461127a57600080fd5b801515811461127a57600080fd5b6001600160e01b03198116811461127a57600080fdfea26469706673582212200e5170909b2d15b17eebd643a1070fba1314314a80aa5e2540e9d41ecff52ab964736f6c63430008040033",
  "devdoc": {
    "author": "Jeffrey Lin, Justa Liang",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Setup ERC721A, EIP712 and first stage info"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "nextStage((uint8,uint16,uint32,uint32,uint160))": {
        "details": "Go to next stage"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payee(uint256)": {
        "details": "Getter for the address of the payee number `index`."
      },
      "release(address)": {
        "details": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the total shares and their previous withdrawals."
      },
      "release(address,address)": {
        "details": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 contract."
      },
      "released(address)": {
        "details": "Getter for the amount of Ether already released to a payee."
      },
      "released(address,address)": {
        "details": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an IERC20 contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserve(address,uint256)": {
        "details": "Reserve NFT"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set new baseURI"
      },
      "shares(address)": {
        "details": "Getter for the amount of shares held by an account."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalReleased()": {
        "details": "Getter for the total amount of Ether already released."
      },
      "totalReleased(address)": {
        "details": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 contract."
      },
      "totalShares()": {
        "details": "Getter for the total shares held by payees."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Template NFT ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "publicMint(uint8)": {
        "notice": "Public mint"
      },
      "whitelistMint((address,uint8,uint8,uint8),bytes,uint8)": {
        "notice": "Whitelist mint using the voucher"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2181,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2185,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2187,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2192,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2173_storage)"
      },
      {
        "astId": 2197,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)2178_storage)"
      },
      {
        "astId": 2201,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2207,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3137,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 141,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_totalShares",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 143,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_totalReleased",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 147,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_shares",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 151,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_released",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 154,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_payees",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 159,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_erc20TotalReleased",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_contract(IERC20)623,t_uint256)"
      },
      {
        "astId": 166,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_erc20Released",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_contract(IERC20)623,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3355,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "stageInfo",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(StageInfo)3352_storage"
      },
      {
        "astId": 3361,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 3371,
        "contract": "contracts/TemplateNFT.sol:TemplateNFT",
        "label": "_whitelistInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(MinterInfo)3366_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2178_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2178_storage"
      },
      "t_mapping(t_address,t_struct(MinterInfo)3366_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TemplateNFT.MinterInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MinterInfo)3366_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)623,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)623",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)623,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)623",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2173_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2173_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2178_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2175,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2177,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MinterInfo)3366_storage": {
        "encoding": "inplace",
        "label": "struct TemplateNFT.MinterInfo",
        "members": [
          {
            "astId": 3363,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3365,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "remain",
            "offset": 1,
            "slot": "0",
            "type": "t_uint248"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StageInfo)3352_storage": {
        "encoding": "inplace",
        "label": "struct TemplateNFT.StageInfo",
        "members": [
          {
            "astId": 3343,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "stageId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3345,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "maxSupply",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3347,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "startTime",
            "offset": 3,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3349,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "endTime",
            "offset": 7,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3351,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "mintPrice",
            "offset": 11,
            "slot": "0",
            "type": "t_uint160"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2173_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2170,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2172,
            "contract": "contracts/TemplateNFT.sol:TemplateNFT",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint248": {
        "encoding": "inplace",
        "label": "uint248",
        "numberOfBytes": "31"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}